version: "3.8"

services:

  # consul
  consul-server:
    image: hashicorp/consul:latest
    container_name: consul-server
    restart: always
    volumes:
      - ./consul/server.json:/consul/config/server.json:ro
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "agent"

  consul-client:
    image: hashicorp/consul:latest
    container_name: consul-client
    restart: always
    volumes:
      - ./consul/client.json:/consul/config/client.json:ro
    command: "agent"

  # kong
  kong-db:
    container_name: kong-db
    image: postgres:latest
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./kong/pg_data:/var/lib/postgresql/data/

  kong-migrations:
    container_name: kong-migrations
    image: kong/kong-gateway:3.5.0.1
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    command: kong migrations bootstrap

  kong-server:
    container_name: kong-server
    image: kong/kong-gateway:3.5.0.1
    restart: always
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    env_file:
      - ./.env

  # keycloak
  keycloak-db:
    container_name: keycloak-db
    image: mysql:8
    restart: always
    command: [ "mysqld", "--port=3307", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci" ]
    ports:
      - "3307:3307"
    env_file:
      - ./.env
    volumes:
      - ./keycloak/db/data:/var/lib/mysql

  keycloak-server:
    container_name: keycloak-server
    image: quay.io/keycloak/keycloak:22.0.5
    restart: always
    ports:
      - "9443:9443"
    env_file:
      - ./.env
    volumes:
      - ./keycloak/app:/etc/x509/https # map certificates to container
    depends_on:
      - keycloak-db
    command: [ 'start --hostname localhost --https-port 9443' ]

  # prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.48.1
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    expose:
      - 9090

  # alertmanager
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.26.0
    restart: unless-stopped
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    expose:
      - 9093

  # nodeexporter
  nodeexporter:
    container_name: nodeexporter
    image: prom/node-exporter:v1.7.0
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100

  # pushgateway
  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway:v1.6.2
    restart: unless-stopped
    expose:
      - 9091

  # cadvisor
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on macOS only for Linux
    restart: unless-stopped
    expose:
      - 8080

  # grafana
  grafana:
    container_name: grafana
    image: grafana/grafana:10.2.2
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    expose:
      - 3000

  # caddy
  caddy:
    container_name: caddy
    image: caddy:2.7.5
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "8080:8080"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-$2a$14$1l.IozJx7xQRVmlkEQ32OeEEfP5mRxTpbDTCTcXRqn19gXD8YK1pO}

networks:
  default:
    name: multi-lang
    external: true

volumes:
  prometheus_data: { }
  grafana_data: { }